#include <QTRSensors.h>
//penser à installer la library qtr
// create an object for your type of sensor (RC or Analog)
// in this example we have two sensors on analog inputs 0 - 1, a.k.a. digital pins 8 - 9
QTRSensorsRC qtr((char[]) {8, 9}, 2);
// QTRSensorsA qtr((char[]) {0, 1}, 2); //capteur analogique
void Tourner_D() {
  analogWrite(5, 59);
  analogWrite(6, 60);
  digitalWrite(10, LOW);
  digitalWrite(11, HIGH);
}
void Tourner_G() {
  analogWrite(5, 59);
  analogWrite(6, 60);
  digitalWrite(10, HIGH);
  digitalWrite(11, LOW);
}

// Décrire cette fonction
void stop() {
  analogWrite(5, 0);
  analogWrite(6, 0);
  digitalWrite(10, HIGH);
  digitalWrite(11, HIGH);
}

void setup()
{
  // optional: wait for some input from the user, such as  a button press
  servo1.attach(pin_servoG);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);    // turn on Arduino's LED to indicate we are in calibration mode
  // then start calibration phase and move the sensors over both
  // reflectance extremes they will encounter in your application:
  int i;
  for (i = 0; i < 250; i++)  // make the calibration take about 5 seconds
  {
    qtr.calibrate();
    delay(20);
  }
  digitalWrite(13, LOW);    // turn on Arduino's LED to indicate we are in calibration mode
   // optional: signal that the calibration phase is now over and wait for further
  // input from the user, such as a button press
}
void loop()
{
  unsigned int sensors[2];
  // get calibrated sensor values returned in the sensors array, along with the line position
  // position will range from 0 to 2000, with 1000 corresponding to the line over the middle
  // sensor.
  int position = qtr.readLine(sensors);
  // if all three sensors see very low reflectance, take some appropriate action for this
  // situation.void setup() {

  if (sensors[0] > 750) {
    Tourner_D();
    delay(100);
    stop();
  }
   if (sensors[1] > 750) {
    Tourner_G();
    delay(100);
    stop();
  }
 
}
